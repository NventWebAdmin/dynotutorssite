{"ast":null,"code":"import React from \"react\";\nimport axios from \"axios\";\nlet createAPIUrl = \"https://1e4loh865h.execute-api.us-east-2.amazonaws.com/DEV\";\n{\n  /*\n  ////////get data\n  let result = await getRecorddata({\n        objectName: \"student\",\n        objectData: {},\n        keyConditions: [\n          { field: \"startdate\", value: 1, expression: \">\" },\n          { field: \"class\", value: \"first\", expression: \"=\" },\n        ],\n        filterConditions: [\n          { field: \"rollnumber\", value: 1, expression: \"=\" },\n          { field: \"age\", value: \"first\", expression: \"=\" },\n        ],\n      });\n      console.log(result);\n      if (result.isSuccess === \"false\") {\n        this.setState(\n          {\n            showNotification: \"false\",\n            notificationMessages: [],\n          },\n           () =>\n            this.setState({\n              showNotification: \"true\",\n              notificationMessages: [\n                {\n                  name: \"message1\",\n                  message: result.message,\n                  type: \"error\",\n                },\n              ],\n            })\n        );\n      } else {\n        this.setState(\n          {\n            showNotification: \"false\",\n            notificationMessages: [],\n          },\n           () =>\n            this.setState({\n              showNotification: \"true\",\n              notificationMessages: [\n                {\n                  name: \"message1\",\n                  message: \"data retrieved\",\n                  type: \"info\",\n                },\n              ],\n            })\n        );\n      }\n      \n  //////////////insert record\n  let result = await createRecord({\n        objectName: \"product\",\n        objectData: {\n          Id: \"id2\",\n          name: \"pradeeprao\",\n          city: \"dallas\",\n          phone: \"1234\",\n          state: \"texas\",\n          zip: \"75206\",\n        },\n      });\n      if (result.isSuccess === \"false\") {\n        this.setState(\n          {\n            showNotification: \"false\",\n            notificationMessages: [],\n          },\n           () =>\n            this.setState({\n              showNotification: \"true\",\n              notificationMessages: [\n                {\n                  name: \"message1\",\n                  message: result.message,\n                  type: \"error\",\n                },\n              ],\n            })\n        );\n      } else {\n        this.setState(\n          {\n            showNotification: \"false\",\n            notificationMessages: [],\n          },\n           () =>\n            this.setState({\n              showNotification: \"true\",\n              notificationMessages: [\n                {\n                  name: \"message1\",\n                  message: \"data inserted\",\n                  type: \"info\",\n                },\n              ],\n            })\n        );\n      }\n  //////////////update record\n  let result = await updateRecord({\n  objectName: \"product\",\n  objectPrimaryKeyValue: { Id: \"id1\" },\n  objectData: {\n    name: \"pradeeprao\",\n    city: \"dallas\",\n    phone: \"1234\",\n    state: \"texas\",\n    zip: \"75206\",\n  },\n  });\n  if (result.isSuccess === \"false\") {\n  this.setState(\n    {\n      showNotification: \"false\",\n      notificationMessages: [],\n    },\n     () =>\n      this.setState({\n        showNotification: \"true\",\n        notificationMessages: [\n          {\n            name: \"message1\",\n            message: result.message,\n            type: \"error\",\n          },\n        ],\n      })\n  );\n  } else {\n  this.setState(\n    {\n      showNotification: \"false\",\n      notificationMessages: [],\n    },\n     () =>\n      this.setState({\n        showNotification: \"true\",\n        notificationMessages: [\n          {\n            name: \"message1\",\n            message: \"data updated\",\n            type: \"info\",\n          },\n        ],\n      })\n  );\n  }\n  ///////////////delete item\n   let result = await deleteRecord({\n        objectName: \"account\",\n        objectPrimaryKeyValue: { Id: \"id1\" },\n      });\n      if (result.isSuccess === \"false\") {\n        this.setState(\n          {\n            showNotification: \"false\",\n            notificationMessages: [],\n          },\n           () =>\n            this.setState({\n              showNotification: \"true\",\n              notificationMessages: [\n                {\n                  name: \"message1\",\n                  message: result.message,\n                  type: \"error\",\n                },\n              ],\n            })\n        );\n      } else {\n        this.setState(\n          {\n            showNotification: \"false\",\n            notificationMessages: [],\n          },\n           () =>\n            this.setState({\n              showNotification: \"true\",\n              notificationMessages: [\n                {\n                  name: \"message1\",\n                  message: \"data deleted\",\n                  type: \"info\",\n                },\n              ],\n            })\n        );\n      }\n        ///////bulkcreated\n          let result = await bulkcreateRecord({\n          objectName: \"student\",\n          objectListData: [\n            { orgname: \"gouthama\", id: \"tsest\" },\n            { orgname: \"gouthama\", id: \"tsest2\" },\n          ],\n        });\n        if (result.isSuccess === \"false\") {\n          alert(result.message);\n        } else {\n          console.log(result);\n        }\n  */\n}\nexport function getRecordsAWS() {\n  let recArray = [\"test\", \"test2\"];\n  return recArray;\n}\nexport async function getRecordAWS(dataprops) {\n  console.log(dataprops);\n  let result = {\n    isSuccess: \"false\",\n    message: \"\",\n    dataprops: {}\n  };\n  let endurl = createAPIUrl + \"/\" + dataprops.objectName + \"/retrieve\";\n  console.log(endurl);\n  let keyConditions = dataprops.keyConditions;\n  let filterConditions = dataprops.filterConditions;\n  let KeyConditionExpression = \"\";\n  let filterConditionExpression = \"\";\n  let ExpressionAttributeNames = {};\n  let ExpressionAttributeValues = {};\n  let index = 0;\n  let lastIndex = keyConditions.length - 1;\n\n  for (let i in keyConditions) {\n    console.log(i);\n    let keyindex = \"#a\" + index;\n    ExpressionAttributeNames[keyindex] = keyConditions[i].field;\n    let valueindex = \":x\" + index;\n    ExpressionAttributeValues[valueindex] = keyConditions[i].value;\n\n    if (index < lastIndex) {\n      if (keyConditions[i].expression == \"beginswith\") {\n        KeyConditionExpression = KeyConditionExpression + \"begins_with (\" + \"#a\" + index + \" \" + \",\" + \" :\" + \"x\" + index + \") and \";\n      } else {\n        KeyConditionExpression = KeyConditionExpression + \"#a\" + index + \" \" + keyConditions[i].expression + \" :\" + \"x\" + index + \" and \";\n      }\n    } else {\n      // KeyConditionExpression =\n      //   KeyConditionExpression +\n      //   \"#a\" +\n      //   index +\n      //   \" \" +\n      //   keyConditions[i].expression +\n      //   \" :\" +\n      //   \"x\" +\n      //   index +\n      //   \" \";\n      ///////\n      if (keyConditions[i].expression == \"beginswith\") {\n        KeyConditionExpression = KeyConditionExpression + \"begins_with (\" + \"#a\" + index + \" \" + \",\" + \" :\" + \"x\" + index + \")\";\n      } else {\n        KeyConditionExpression = KeyConditionExpression + \"#a\" + index + \" \" + keyConditions[i].expression + \" :\" + \"x\" + index + \" \";\n      } /////\n\n    }\n\n    index = index + 1;\n  }\n\n  let filterindex = 0;\n  let filterlastIndex = filterConditions.length - 1;\n\n  for (let i in filterConditions) {\n    console.log(i);\n    let keyindex = \"#b\" + filterindex;\n    ExpressionAttributeNames[keyindex] = filterConditions[i].field;\n    let valueindex = \":y\" + filterindex;\n    ExpressionAttributeValues[valueindex] = filterConditions[i].value;\n\n    if (filterindex < filterlastIndex) {\n      filterConditionExpression = filterConditionExpression + \"#b\" + filterindex + \" \" + filterConditions[i].expression + \" :\" + \"y\" + filterindex + \" and \";\n    } else {\n      filterConditionExpression = filterConditionExpression + \"#b\" + filterindex + \" \" + filterConditions[i].expression + \" :\" + \"y\" + filterindex + \" \";\n    }\n\n    filterindex = filterindex + 1;\n  }\n\n  console.log(KeyConditionExpression);\n  console.log(filterConditionExpression);\n  console.log(ExpressionAttributeNames);\n  console.log(ExpressionAttributeValues);\n  let params = {\n    FilterExpression: filterConditionExpression,\n    KeyConditionExpression: KeyConditionExpression,\n    ExpressionAttributeNames: ExpressionAttributeNames,\n    ExpressionAttributeValues: ExpressionAttributeValues,\n    PageSize: dataprops.pageSize,\n    Limit: dataprops.limit,\n    ExclusiveStartKey: dataprops.exclusiveStartKey\n  };\n  console.log(params);\n  let axiosresult = await axios.post(endurl, params, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    console.log(\"response on\" + dataprops.objectName);\n    console.log(response);\n    result = {\n      isSuccess: \"true\",\n      message: \"user loggedin\",\n      dataprops: response.data\n    };\n    return result;\n  }).catch(error => {\n    console.log(error.response);\n    let errormessage = \"\";\n\n    if (error.response) {\n      errormessage = error.response.data.message;\n    } else {\n      errormessage = JSON.stringify(error);\n    }\n\n    result = {\n      isSuccess: \"false\",\n      message: errormessage,\n      dataprops: {}\n    };\n    return result;\n  });\n  result = axiosresult;\n  console.log(result);\n  return result;\n}\nexport async function bulkcreateRecordAWS(dataprops) {\n  console.log(dataprops);\n  let result = {\n    isSuccess: \"false\",\n    message: \"\",\n    dataprops: {}\n  };\n  let endurl = createAPIUrl + \"/\" + dataprops.objectName + \"/bulkcreate\";\n  console.log(endurl);\n  let objectListData = dataprops.objectListData;\n  let objectListDatatobeSent = [];\n\n  for (let objectData in objectListData) {\n    objectListDatatobeSent.push({\n      PutRequest: {\n        Item: objectListData[objectData]\n      }\n    });\n  }\n\n  let datatobesent = {};\n  datatobesent[dataprops.objectName] = objectListDatatobeSent;\n  let axiosresult = await axios.post(endurl, datatobesent, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    console.log(response);\n    result = {\n      isSuccess: \"true\",\n      message: \"user loggedin\",\n      dataprops: response.data\n    };\n    return result;\n  }).catch(error => {\n    console.log(error);\n    let errormessage = \"\";\n\n    if (error.response) {\n      errormessage = error.response.data.message;\n    } else {\n      errormessage = JSON.stringify(error);\n    }\n\n    result = {\n      isSuccess: \"false\",\n      message: errormessage,\n      dataprops: {}\n    };\n    return result;\n  });\n  result = axiosresult;\n  console.log(result);\n  return result;\n}\nexport async function createRecordAWS(dataprops) {\n  console.log(dataprops);\n  let result = {\n    isSuccess: \"false\",\n    message: \"\",\n    dataprops: {}\n  };\n  let endurl = createAPIUrl + \"/\" + dataprops.objectName + \"/create\";\n  console.log(endurl);\n  let objectData = dataprops.objectData;\n  let axiosresult = await axios.post(endurl, objectData, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    console.log(response);\n    result = {\n      isSuccess: \"true\",\n      message: \"user loggedin\",\n      dataprops: response.data\n    };\n    return result;\n  }).catch(error => {\n    console.log(error);\n    let errormessage = \"\";\n\n    if (error.response) {\n      errormessage = error.response.data.message;\n    } else {\n      errormessage = JSON.stringify(error);\n    }\n\n    result = {\n      isSuccess: \"false\",\n      message: errormessage,\n      dataprops: {}\n    };\n    return result;\n  });\n  result = axiosresult;\n  console.log(result);\n  return result;\n}\nexport async function updateRecordAWS(dataprops) {\n  console.log(dataprops);\n  let result = {\n    isSuccess: \"false\",\n    message: \"\",\n    dataprops: {}\n  };\n  let endurl = createAPIUrl + \"/\" + dataprops.objectName + \"/update\";\n  console.log(endurl);\n  let fieldProps = dataprops.objectData;\n  let objectData = dataprops.objectData;\n  let UpdateExpression = \"set \";\n  let ExpressionAttributeNames = {};\n  let ExpressionAttributeValues = {};\n  let index = 0;\n  let lastIndex = Object.keys(fieldProps).length - 1;\n\n  for (let i in fieldProps) {\n    console.log();\n    let keyindex = \"#a\" + index;\n    ExpressionAttributeNames[keyindex] = i;\n    let valueindex = \":x\" + index;\n    ExpressionAttributeValues[valueindex] = fieldProps[i];\n\n    if (index < lastIndex) {\n      UpdateExpression = UpdateExpression + \"#a\" + index + \" = :\" + \"x\" + index + \" , \";\n    } else {\n      UpdateExpression = UpdateExpression + \"#a\" + index + \" = :\" + \"x\" + index + \" \";\n    }\n\n    index = index + 1;\n  }\n\n  console.log(ExpressionAttributeValues);\n  objectData = {\n    Key: dataprops.objectPrimaryKeyValue,\n    UpdateExpression: UpdateExpression,\n    ExpressionAttributeNames: ExpressionAttributeNames,\n    ExpressionAttributeValues: ExpressionAttributeValues\n  };\n  let axiosresult = await axios.post(endurl, objectData, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    console.log(response);\n    result = {\n      isSuccess: \"true\",\n      message: \"user loggedin\",\n      dataprops: response.data\n    };\n    return result;\n  }).catch(error => {\n    console.log(error.response);\n    let errormessage = \"\";\n\n    if (error.response) {\n      errormessage = error.response.data.message;\n    } else {\n      errormessage = JSON.stringify(error);\n    }\n\n    result = {\n      isSuccess: \"false\",\n      message: errormessage,\n      dataprops: {}\n    };\n    return result;\n  });\n  result = axiosresult;\n  console.log(result);\n  return result;\n}\nexport async function deleteRecordAWS(dataprops) {\n  console.log(dataprops);\n  let result = {\n    isSuccess: \"false\",\n    message: \"\",\n    dataprops: {}\n  };\n  let endurl = createAPIUrl + \"/\" + dataprops.objectName + \"/delete\";\n  console.log(endurl);\n  let objectData = {\n    Key: dataprops.objectPrimaryKeyValue\n  };\n  let axiosresult = await axios.post(endurl, objectData, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    console.log(response);\n    result = {\n      isSuccess: \"true\",\n      message: \"user loggedin\",\n      dataprops: response.data\n    };\n    return result;\n  }).catch(error => {\n    console.log(error.response);\n    let errormessage = \"\";\n\n    if (error.response) {\n      errormessage = error.response.data.message;\n    } else {\n      errormessage = JSON.stringify(error);\n    }\n\n    result = {\n      isSuccess: \"false\",\n      message: errormessage,\n      dataprops: {}\n    };\n    return result;\n  });\n  result = axiosresult;\n  console.log(result);\n  return result;\n}","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorssite/src/db/aws.js"],"names":["React","axios","createAPIUrl","getRecordsAWS","recArray","getRecordAWS","dataprops","console","log","result","isSuccess","message","endurl","objectName","keyConditions","filterConditions","KeyConditionExpression","filterConditionExpression","ExpressionAttributeNames","ExpressionAttributeValues","index","lastIndex","length","i","keyindex","field","valueindex","value","expression","filterindex","filterlastIndex","params","FilterExpression","PageSize","pageSize","Limit","limit","ExclusiveStartKey","exclusiveStartKey","axiosresult","post","headers","then","response","data","catch","error","errormessage","JSON","stringify","bulkcreateRecordAWS","objectListData","objectListDatatobeSent","objectData","push","PutRequest","Item","datatobesent","createRecordAWS","updateRecordAWS","fieldProps","UpdateExpression","Object","keys","Key","objectPrimaryKeyValue","deleteRecordAWS"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,IAAIC,YAAY,GAAG,4DAAnB;AAEA;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBC;AAED,OAAO,SAASC,aAAT,GAAyB;AAC9B,MAAIC,QAAQ,GAAG,CAAC,MAAD,EAAS,OAAT,C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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nlet createAPIUrl = \"https://1e4loh865h.execute-api.us-east-2.amazonaws.com/DEV\";\n\n{\n  /*\n////////get data\n let result = await getRecorddata({\n        objectName: \"student\",\n        objectData: {},\n        keyConditions: [\n          { field: \"startdate\", value: 1, expression: \">\" },\n          { field: \"class\", value: \"first\", expression: \"=\" },\n        ],\n        filterConditions: [\n          { field: \"rollnumber\", value: 1, expression: \"=\" },\n          { field: \"age\", value: \"first\", expression: \"=\" },\n        ],\n      });\n      console.log(result);\n      if (result.isSuccess === \"false\") {\n        this.setState(\n          {\n            showNotification: \"false\",\n            notificationMessages: [],\n          },\n\n          () =>\n            this.setState({\n              showNotification: \"true\",\n              notificationMessages: [\n                {\n                  name: \"message1\",\n                  message: result.message,\n                  type: \"error\",\n                },\n              ],\n            })\n        );\n      } else {\n        this.setState(\n          {\n            showNotification: \"false\",\n            notificationMessages: [],\n          },\n\n          () =>\n            this.setState({\n              showNotification: \"true\",\n              notificationMessages: [\n                {\n                  name: \"message1\",\n                  message: \"data retrieved\",\n                  type: \"info\",\n                },\n              ],\n            })\n        );\n      }\n      \n  //////////////insert record\nlet result = await createRecord({\n        objectName: \"product\",\n        objectData: {\n          Id: \"id2\",\n          name: \"pradeeprao\",\n          city: \"dallas\",\n          phone: \"1234\",\n          state: \"texas\",\n          zip: \"75206\",\n        },\n      });\n      if (result.isSuccess === \"false\") {\n        this.setState(\n          {\n            showNotification: \"false\",\n            notificationMessages: [],\n          },\n\n          () =>\n            this.setState({\n              showNotification: \"true\",\n              notificationMessages: [\n                {\n                  name: \"message1\",\n                  message: result.message,\n                  type: \"error\",\n                },\n              ],\n            })\n        );\n      } else {\n        this.setState(\n          {\n            showNotification: \"false\",\n            notificationMessages: [],\n          },\n\n          () =>\n            this.setState({\n              showNotification: \"true\",\n              notificationMessages: [\n                {\n                  name: \"message1\",\n                  message: \"data inserted\",\n                  type: \"info\",\n                },\n              ],\n            })\n        );\n      }\n\n//////////////update record\nlet result = await updateRecord({\n  objectName: \"product\",\n  objectPrimaryKeyValue: { Id: \"id1\" },\n  objectData: {\n    name: \"pradeeprao\",\n    city: \"dallas\",\n    phone: \"1234\",\n    state: \"texas\",\n    zip: \"75206\",\n  },\n});\nif (result.isSuccess === \"false\") {\n  this.setState(\n    {\n      showNotification: \"false\",\n      notificationMessages: [],\n    },\n\n    () =>\n      this.setState({\n        showNotification: \"true\",\n        notificationMessages: [\n          {\n            name: \"message1\",\n            message: result.message,\n            type: \"error\",\n          },\n        ],\n      })\n  );\n} else {\n  this.setState(\n    {\n      showNotification: \"false\",\n      notificationMessages: [],\n    },\n\n    () =>\n      this.setState({\n        showNotification: \"true\",\n        notificationMessages: [\n          {\n            name: \"message1\",\n            message: \"data updated\",\n            type: \"info\",\n          },\n        ],\n      })\n  );\n}\n\n///////////////delete item\n\n\n let result = await deleteRecord({\n        objectName: \"account\",\n        objectPrimaryKeyValue: { Id: \"id1\" },\n      });\n      if (result.isSuccess === \"false\") {\n        this.setState(\n          {\n            showNotification: \"false\",\n            notificationMessages: [],\n          },\n\n          () =>\n            this.setState({\n              showNotification: \"true\",\n              notificationMessages: [\n                {\n                  name: \"message1\",\n                  message: result.message,\n                  type: \"error\",\n                },\n              ],\n            })\n        );\n      } else {\n        this.setState(\n          {\n            showNotification: \"false\",\n            notificationMessages: [],\n          },\n\n          () =>\n            this.setState({\n              showNotification: \"true\",\n              notificationMessages: [\n                {\n                  name: \"message1\",\n                  message: \"data deleted\",\n                  type: \"info\",\n                },\n              ],\n            })\n        );\n      }\n\n\n      ///////bulkcreated\n          let result = await bulkcreateRecord({\n          objectName: \"student\",\n          objectListData: [\n            { orgname: \"gouthama\", id: \"tsest\" },\n            { orgname: \"gouthama\", id: \"tsest2\" },\n          ],\n        });\n        if (result.isSuccess === \"false\") {\n          alert(result.message);\n        } else {\n          console.log(result);\n        }\n\n\n*/\n}\n\nexport function getRecordsAWS() {\n  let recArray = [\"test\", \"test2\"];\n  return recArray;\n}\n\nexport async function getRecordAWS(dataprops) {\n  console.log(dataprops);\n\n  let result = { isSuccess: \"false\", message: \"\", dataprops: {} };\n  let endurl = createAPIUrl + \"/\" + dataprops.objectName + \"/retrieve\";\n  console.log(endurl);\n\n  let keyConditions = dataprops.keyConditions;\n  let filterConditions = dataprops.filterConditions;\n\n  let KeyConditionExpression = \"\";\n  let filterConditionExpression = \"\";\n  let ExpressionAttributeNames = {};\n  let ExpressionAttributeValues = {};\n  let index = 0;\n  let lastIndex = keyConditions.length - 1;\n  for (let i in keyConditions) {\n    console.log(i);\n    let keyindex = \"#a\" + index;\n    ExpressionAttributeNames[keyindex] = keyConditions[i].field;\n    let valueindex = \":x\" + index;\n    ExpressionAttributeValues[valueindex] = keyConditions[i].value;\n    if (index < lastIndex) {\n      if (keyConditions[i].expression == \"beginswith\") {\n        KeyConditionExpression =\n          KeyConditionExpression +\n          \"begins_with (\" +\n          \"#a\" +\n          index +\n          \" \" +\n          \",\" +\n          \" :\" +\n          \"x\" +\n          index +\n          \") and \";\n      } else {\n        KeyConditionExpression =\n          KeyConditionExpression +\n          \"#a\" +\n          index +\n          \" \" +\n          keyConditions[i].expression +\n          \" :\" +\n          \"x\" +\n          index +\n          \" and \";\n      }\n    } else {\n      // KeyConditionExpression =\n      //   KeyConditionExpression +\n      //   \"#a\" +\n      //   index +\n      //   \" \" +\n      //   keyConditions[i].expression +\n      //   \" :\" +\n      //   \"x\" +\n      //   index +\n      //   \" \";\n\n      ///////\n      if (keyConditions[i].expression == \"beginswith\") {\n        KeyConditionExpression =\n          KeyConditionExpression +\n          \"begins_with (\" +\n          \"#a\" +\n          index +\n          \" \" +\n          \",\" +\n          \" :\" +\n          \"x\" +\n          index +\n          \")\";\n      } else {\n        KeyConditionExpression =\n          KeyConditionExpression +\n          \"#a\" +\n          index +\n          \" \" +\n          keyConditions[i].expression +\n          \" :\" +\n          \"x\" +\n          index +\n          \" \";\n      }\n      /////\n    }\n    index = index + 1;\n  }\n\n  let filterindex = 0;\n  let filterlastIndex = filterConditions.length - 1;\n  for (let i in filterConditions) {\n    console.log(i);\n    let keyindex = \"#b\" + filterindex;\n    ExpressionAttributeNames[keyindex] = filterConditions[i].field;\n    let valueindex = \":y\" + filterindex;\n    ExpressionAttributeValues[valueindex] = filterConditions[i].value;\n    if (filterindex < filterlastIndex) {\n      filterConditionExpression =\n        filterConditionExpression +\n        \"#b\" +\n        filterindex +\n        \" \" +\n        filterConditions[i].expression +\n        \" :\" +\n        \"y\" +\n        filterindex +\n        \" and \";\n    } else {\n      filterConditionExpression =\n        filterConditionExpression +\n        \"#b\" +\n        filterindex +\n        \" \" +\n        filterConditions[i].expression +\n        \" :\" +\n        \"y\" +\n        filterindex +\n        \" \";\n    }\n    filterindex = filterindex + 1;\n  }\n\n  console.log(KeyConditionExpression);\n  console.log(filterConditionExpression);\n  console.log(ExpressionAttributeNames);\n  console.log(ExpressionAttributeValues);\n\n  let params = {\n    FilterExpression: filterConditionExpression,\n    KeyConditionExpression: KeyConditionExpression,\n    ExpressionAttributeNames: ExpressionAttributeNames,\n    ExpressionAttributeValues: ExpressionAttributeValues,\n    PageSize: dataprops.pageSize,\n    Limit: dataprops.limit,\n    ExclusiveStartKey: dataprops.exclusiveStartKey,\n  };\n  console.log(params);\n  let axiosresult = await axios\n    .post(endurl, params, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n    .then((response) => {\n      console.log(\"response on\" + dataprops.objectName);\n      console.log(response);\n      result = {\n        isSuccess: \"true\",\n        message: \"user loggedin\",\n        dataprops: response.data,\n      };\n      return result;\n    })\n    .catch((error) => {\n      console.log(error.response);\n      let errormessage = \"\";\n      if (error.response) {\n        errormessage = error.response.data.message;\n      } else {\n        errormessage = JSON.stringify(error);\n      }\n      result = {\n        isSuccess: \"false\",\n        message: errormessage,\n        dataprops: {},\n      };\n      return result;\n    });\n  result = axiosresult;\n  console.log(result);\n\n  return result;\n}\n\nexport async function bulkcreateRecordAWS(dataprops) {\n  console.log(dataprops);\n  let result = { isSuccess: \"false\", message: \"\", dataprops: {} };\n\n  let endurl = createAPIUrl + \"/\" + dataprops.objectName + \"/bulkcreate\";\n  console.log(endurl);\n  let objectListData = dataprops.objectListData;\n  let objectListDatatobeSent = [];\n  for (let objectData in objectListData) {\n    objectListDatatobeSent.push({\n      PutRequest: {\n        Item: objectListData[objectData],\n      },\n    });\n  }\n  let datatobesent = {};\n  datatobesent[dataprops.objectName] = objectListDatatobeSent;\n\n  let axiosresult = await axios\n    .post(endurl, datatobesent, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n    .then((response) => {\n      console.log(response);\n      result = {\n        isSuccess: \"true\",\n        message: \"user loggedin\",\n        dataprops: response.data,\n      };\n      return result;\n    })\n    .catch((error) => {\n      console.log(error);\n      let errormessage = \"\";\n      if (error.response) {\n        errormessage = error.response.data.message;\n      } else {\n        errormessage = JSON.stringify(error);\n      }\n      result = {\n        isSuccess: \"false\",\n        message: errormessage,\n        dataprops: {},\n      };\n      return result;\n    });\n  result = axiosresult;\n  console.log(result);\n\n  return result;\n}\n\nexport async function createRecordAWS(dataprops) {\n  console.log(dataprops);\n  let result = { isSuccess: \"false\", message: \"\", dataprops: {} };\n\n  let endurl = createAPIUrl + \"/\" + dataprops.objectName + \"/create\";\n  console.log(endurl);\n  let objectData = dataprops.objectData;\n\n  let axiosresult = await axios\n    .post(endurl, objectData, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n    .then((response) => {\n      console.log(response);\n      result = {\n        isSuccess: \"true\",\n        message: \"user loggedin\",\n        dataprops: response.data,\n      };\n      return result;\n    })\n    .catch((error) => {\n      console.log(error);\n      let errormessage = \"\";\n      if (error.response) {\n        errormessage = error.response.data.message;\n      } else {\n        errormessage = JSON.stringify(error);\n      }\n      result = {\n        isSuccess: \"false\",\n        message: errormessage,\n        dataprops: {},\n      };\n      return result;\n    });\n  result = axiosresult;\n  console.log(result);\n\n  return result;\n}\n\nexport async function updateRecordAWS(dataprops) {\n  console.log(dataprops);\n\n  let result = { isSuccess: \"false\", message: \"\", dataprops: {} };\n  let endurl = createAPIUrl + \"/\" + dataprops.objectName + \"/update\";\n  console.log(endurl);\n\n  let fieldProps = dataprops.objectData;\n\n  let objectData = dataprops.objectData;\n  let UpdateExpression = \"set \";\n  let ExpressionAttributeNames = {};\n  let ExpressionAttributeValues = {};\n  let index = 0;\n  let lastIndex = Object.keys(fieldProps).length - 1;\n  for (let i in fieldProps) {\n    console.log();\n    let keyindex = \"#a\" + index;\n    ExpressionAttributeNames[keyindex] = i;\n    let valueindex = \":x\" + index;\n    ExpressionAttributeValues[valueindex] = fieldProps[i];\n    if (index < lastIndex) {\n      UpdateExpression =\n        UpdateExpression + \"#a\" + index + \" = :\" + \"x\" + index + \" , \";\n    } else {\n      UpdateExpression =\n        UpdateExpression + \"#a\" + index + \" = :\" + \"x\" + index + \" \";\n    }\n    index = index + 1;\n  }\n\n  console.log(ExpressionAttributeValues);\n  objectData = {\n    Key: dataprops.objectPrimaryKeyValue,\n    UpdateExpression: UpdateExpression,\n    ExpressionAttributeNames: ExpressionAttributeNames,\n    ExpressionAttributeValues: ExpressionAttributeValues,\n  };\n  let axiosresult = await axios\n    .post(endurl, objectData, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n    .then((response) => {\n      console.log(response);\n      result = {\n        isSuccess: \"true\",\n        message: \"user loggedin\",\n        dataprops: response.data,\n      };\n      return result;\n    })\n    .catch((error) => {\n      console.log(error.response);\n      let errormessage = \"\";\n      if (error.response) {\n        errormessage = error.response.data.message;\n      } else {\n        errormessage = JSON.stringify(error);\n      }\n      result = {\n        isSuccess: \"false\",\n        message: errormessage,\n        dataprops: {},\n      };\n      return result;\n    });\n  result = axiosresult;\n  console.log(result);\n\n  return result;\n}\n\nexport async function deleteRecordAWS(dataprops) {\n  console.log(dataprops);\n\n  let result = { isSuccess: \"false\", message: \"\", dataprops: {} };\n  let endurl = createAPIUrl + \"/\" + dataprops.objectName + \"/delete\";\n  console.log(endurl);\n\n  let objectData = {\n    Key: dataprops.objectPrimaryKeyValue,\n  };\n  let axiosresult = await axios\n    .post(endurl, objectData, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n    .then((response) => {\n      console.log(response);\n      result = {\n        isSuccess: \"true\",\n        message: \"user loggedin\",\n        dataprops: response.data,\n      };\n      return result;\n    })\n    .catch((error) => {\n      console.log(error.response);\n      let errormessage = \"\";\n      if (error.response) {\n        errormessage = error.response.data.message;\n      } else {\n        errormessage = JSON.stringify(error);\n      }\n      result = {\n        isSuccess: \"false\",\n        message: errormessage,\n        dataprops: {},\n      };\n      return result;\n    });\n  result = axiosresult;\n  console.log(result);\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}